//h
#ifndef _SensorIMU_H_
#define _SensorIMU_H_

#include "../PhysicalDefinitions.h"
#include "ip_connection.h"
#include "brick_imu_v2.h"

#define HOST "localhost"
#define PORT 4223
#define IMUUID "5VGPJ3" // Change XYZ to the UID of your Bricklet


class SensorIMU
{
public:
    // Create IP connection and device object
    void create();

    // Calls ipcon_disconnect internally and destroys IMU-object
    void destroy();

    // Connect to brickd, ipcon
    float connect();
    
    // !!Don't use device before ipcon is connected!!
    // Register all data callback to function cb_all_data
	// Set period for all data callback to 0.1s (100ms)
	// Note: The all data callback is only called every 0.1 seconds
	//       if the all data has changed since the last call!
    void registerCallback(float time);

    // Get current Acceleration
    float getAcceleration();

    // Get current Magnetic Fiel
    float getMagneticField();

    // Get current Angular Velocity
    float getAngularVelocity();
    
    // Get current Euler Angle
    float getEulerAngle();

    // Get current Quaternion
    float getQuaternion();

    // Get current Linear Acceleration
    float getLinearAcceleration();
    
    // Get current Gravity Vector 
    float getGravityVector();
    // Get current Temperature
    float getTemperature();
    
    // Get current Calibration Status
    float getCalibrationStatus();   

    // Clean print of all registerd data
    void printAllData();
    
private:
    IPConnection ipcon;
    IMUV2 imu;  
    bool callbackRegistered;
    int setIndex = 0;
    int16_t accelerationValues[3];
    int16_t magneticFieldValues[3];
    int16_t angularVelocityValues[3];
    int16_t eulerAngleValues[3];
    int16_t quaternionValues[4];
    int16_t linearAccelerationValues[3];                             
    int16_t gravityVectorValues[3];
    int8_t temperatureValue;
    uint8_t calibrationStatus;

 void cb_all_data(int16_t acceleration[3], int16_t magnetic_field[3],
                 int16_t angular_velocity[3], int16_t euler_angle[3],
                 int16_t quaternion[4], int16_t linear_acceleration[3],
                 int16_t gravity_vector[3], int8_t temperature,
                 uint8_t calibration_status, void *user_data);
};

#endif

//cpp
#include "SensorIMU.h"

void SensorIMU::create(){
    ipcon_create(&ipcon);
    imu_v2_create(&imu, IMUUID, &ipcon);
}

void SensorIMU::destroy(){
    imu_v2_destroy(&imu);
	ipcon_destroy(&ipcon);
}

float SensorIMU::connect(){
    if(ipcon_connect(&ipcon, HOST, PORT) < 0) {
		fprintf(stderr, "Could not connect\n");
		return 1;
	}
    return 0;
}

void SensorIMU::registerCallback(float time){    
	imu_v2_register_callback(&imu,
	                         IMU_V2_CALLBACK_ALL_DATA,
	                         (void *)cb_all_data,
	                         NULL);    
	imu_v2_set_all_data_period(&imu, time);
}

float SensorIMU::getAcceleration(){return 1;}

float SensorIMU::getMagneticField(){return 1;}

float SensorIMU::getAngularVelocity(){return 1;}

float SensorIMU::getEulerAngle(){return 1;}

float SensorIMU::getQuaternion(){return 1;}

float SensorIMU::getLinearAcceleration(){return 1;}

float SensorIMU::getGravityVector(){return 1;}

float SensorIMU::getTemperature(){return 1;}

float SensorIMU::getCalibrationStatus(){return 1;}

void SensorIMU::printAllData(){
    printf("Acceleration        x: %.02f y: %.02f z: %.02f m/s²\n"
	       "Magnetic Field      x: %.02f y: %.02f z: %.02f µT\n"
	       "Angular Velocity    x: %.02f y: %.02f z: %.02f °/s\n"
	       "Euler Angle         x: %.02f y: %.02f z: %.02f °\n"
	       "Quaternion          x: %.02f y: %.02f z: %.02f w: %.02f\n"
	       "Linear Acceleration x: %.02f y: %.02f z: %.02f m/s²\n"
	       "Gravity Vector      x: %.02f y: %.02f z: %.02f m/s²\n"
	       "Temperature         %d °C\n"
	       "Calibration Status  %d\n\n",

        accelerationValues[0]/100.0,        accelerationValues[1]/100.0,        accelerationValues[2]/100.0,
	    magneticFieldValues[0]/16.0,        magneticFieldValues[1]/16.0,        magneticFieldValues[2]/16.0,
	    angularVelocityValues[0]/16.0,      angularVelocityValues[1]/16.0,      angularVelocityValues[2]/16.0,
        eulerAngleValues[0]/16.0,           eulerAngleValues[1]/16.0,           eulerAngleValues[2]/16.0,
        quaternionValues[1]/16383.0,        quaternionValues[2]/16383.0,        quaternionValues[3]/16383.0,    quaternionValues[0]/16383.0,
        linearAccelerationValues[0]/100.0,  linearAccelerationValues[1]/100.0,  linearAccelerationValues[2]/100.0,
        gravityVectorValues[0]/100.0,       gravityVectorValues[1]/100.0,       gravityVectorValues[2]/100.0,
        temperatureValue, calibrationStatus);
}

void SensorIMU::cb_all_data(int16_t acceleration[3], int16_t magnetic_field[3],
                 int16_t angular_velocity[3], int16_t euler_angle[3],
                 int16_t quaternion[4], int16_t linear_acceleration[3],
                 int16_t gravity_vector[3], int8_t temperature,
                 uint8_t calibration_status, void *user_data){
                    (void)user_data; // avoid unused parameter warning
                    
                    for(int i = 0; i < 3; i++){
                        accelerationValues[i] = acceleration[i];                    
                        magneticFieldValues[i] = magnetic_field[i];
                        angularVelocityValues[i] = angular_velocity[i];                    
                        eulerAngleValues[i] = euler_angle[i];                    
                        quaternionValues[i] = quaternion[i];                    
                        linearAccelerationValues[i] = linear_acceleration[i];                    
                        gravityVectorValues[i] = gravity_vector[i];                    
                    }                    
                    
                    quaternionValues[3] = quaternion[3];
                    temperatureValue = temperature;
                    calibrationStatus = calibration_status;
                 }